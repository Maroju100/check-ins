name: Gradle Build - Feature / Bug
on:
  push:
    branches:
      - 'feature-**/*'
      - 'bugfix-**/*'
      - 'chore-**/*'
      - 'doc-**/*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      #- name: Gradle package
      #  run: ./gradlew assemble
      #- name: Gradle runs tests
      #  run: ./gradlew check
      #- name: Do SonarQube checks
      #  run: ./gradlew sonarqube -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_URL -Dsonar.login=$TOKEN
      #  env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_PROJECT_KEY: oci-checkins
      #    SONAR_URL: https://sonarqube.cloudops.objectcomputing.com
      #    SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      - name: capture sonar result status
        run: echo ::set-output name=result::$(curl -u "${SONAR_TOKEN}:" https://sonarqube.cloudops.objectcomputing.com/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY | jq '.projectStatus.status')
        id: curlSonar
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_PROJECT_KEY: oci-checkins
      - name: fail if sonar result bad
      #  if: steps.curlSonar.outputs.result != 'OK'
        run: |
          echo ${{ steps.curlSonar.outputs.result }}
          echo ${{ 'OK' }}
          echo ${{ steps.curlSonar.outputs.result != 'OK' }}
          echo ${{ 'OK' != 'OK' }}
          echo $OK
          echo ${{ env.OK != 'OK' }}
          echo ${{ steps.curlSOnar.outputs.result != env.OK }}
        env:
          OK: $({"val":"OK"} | jq .val)